What is recursion?
------------------
A function is calling itself then it is called recursive function.

Importants aspects of recursion:
--------------------------------
There has to be a base condition which will take care of terminating the recursive function call.

E.g. Psudo Code:
----------------
<type> function( params ) {
    if( base_condition ) {
        function( params );
    }
}

void main() {
    int x = 3;
    fun1( x );
}

void fun1( int n ) {
    if( n > 0 ) {
        print( "%d", n );
        fun1( n-1 ); // This is a recursive call.
    }
}

How to trace a recursive function?
----------------------------------
Recursive function is traced by using a tree as below.

         fun1( 3 ) --> is n i.e 3 > 0 
           /  \
          /    \
      print 3   fun1( 2 )  --> is n i.e 2 > 0
                   /  \
                  /    \
             print 2   fun1( 1 ) --> is n i.e 1 > 0
                         /  \
                        /    \
                    print 1  fun1( 0 ) --> is n > 0, the base condtion fails and terminates the operation.
                                 |
                                 |
                                 X
OP: 3,2,1

Once the base condition fails the control goes back to the caller function ( fun1(1) in this example ) and the execustion is completed.
Then the control goes back to fun1( 2 ) and so on.

Let's Try one more example to cement our understanding.
-------------------------------------------------------
void fun2( int n ) {
    if( n > 0 ) {
        fun2( n-1 );
        print( "%d", n );
    }
}

void main() {
    int x = 3;
    fun2( x );
}

How this function fun2 executes, let's track:
                                 fun2( 3 )
                                   /  \
                                  /    \
                           fun2( 2 )    3
                              /   \
                             /     \
                        fun2( 1 )   2
                           /   \
                          /     \
                     fun2( 0 )   1
                         |
                         |
                         X
OP: 1,2,3

Let's compare the both examples:
--------------------------------
In scenario one value of n is printed and then the recursive call is made.
In scenario two the recursive call is made and then the printing is done.

Generalizing Recursion:
-----------------------
1. If there are some computations are to be made before making the recursive call the computation is made at calling time. (ASC)
2. Anything that is computed after the recursive call is performed at returning time. (DSC)
3. Recursion is just like a loop, only with a major difference. i.e. the loop will only have ASC phase and recursion can have
   both ASC as well as DESC phase.

How recursion uses stack?
-------------------------
Consider this example below, that we have already seen in the example.

void main() {
    int x = 3;
    fun1( x );
}

void fun1( int n ) {
    if( n > 0 ) {
        print( "%d", n );
        fun1( n-1 ); // This is a recursive call.
    }
}

         fun1( 3 ) --> is n i.e 3 > 0 
           /  \
          /    \
      print 3   fun1( 2 )  --> is n i.e 2 > 0
                   /  \
                  /    \
             print 2   fun1( 1 ) --> is n i.e 1 > 0
                         /  \
                        /    \
                    print 1  fun1( 0 ) --> is n > 0, the base condtion fails and terminates the operation.
                                 |
                                 |
                                 X
OP: 3,2,1

                           +-----------------+             
                           |fun1:         n=0|
                           |-----------------|
                           |fun1:         n=1|
                           |-----------------|
                           |fun1:         n=2|
                           |-----------------|
                           |fun1:         n=3|
                           |-----------------|
                           |main:         x=3|
                           |-----------------|
                           |      Stack      |
                           +-----------------+      

Let's analyse how the stack is being used, if we ignore the activation record for main. We have 4 activation records for fun1.
Size of the stack is 4, and each activation record is consuming the memory of sizeof(int: n).

With this analysis we can conclude  for fun1(3), there are 4 calls which translates as below.
For fun1(n) we have n+1 calls being made. This is polynomial of degree 1. So it is safe to say recursion has O(n) space complexity.

Recursion Relation: Time complexity of Recursion.
-------------------------------------------------
We make an assumption that each statement takes 1 unit of time to be executed.

void main() {
    int x = 3;
    fun1( x );
}

void fun1( int n ) {
    if( n > 0 ) {
        print( "%d", n );
        fun1( n-1 ); // This is a recursive call.
    }
}

1. The main() function initializes x = 3 and calls fun1(3).
2. The function fun1(int n) is a recursive function that:
3. Prints the value of n.
4. Calls itself with n - 1 until n becomes 0.

Step-by-Step Execution:
For n = 3, the recursive calls happen as follows:
fun1(3) → prints 3 → calls fun1(2)
fun1(2) → prints 2 → calls fun1(1)
fun1(1) → prints 1 → calls fun1(0)
fun1(0) → Base condition met (n > 0 fails), so function exits.

- For the same example we will be calculating the time complexity.
  - Each function call prints n, which takes 1 unit of time.
  - The function runs recursively n times before reaching n = 0.
  - Therefore, the total time taken is n units.
  - Since the number of function calls grows linearly with n, the complexity is O(n).

Find time complexity using recurrence relation:
-----------------------------------------------
Total Time = Time Taken by Recursive Call + O(1) [printing statement ]

      +- 1           [n = 0]
      |
T(n)--+
      |
      +- T(n-1) + 1  [n > 0]

With successive substitution we can calculate:
T(n)   = T(n-1) + 1  --  1
T(n-1) = T(n-2) + 1  --  2
T(n) = T(n-2) + 2    --> After replacing equation 1 by using equation 2.

Similarly,
T(n-2) = T(n-3) + 1
T(n) = T(n-3)+3      --  3

Keep doing this for K times we get
T(n) = T(n-k)+k      --  4

Assuming n-k = 0, that is n=k
T(n) = T(n-n) + n
T(n) = T(0) + n
T(n) = 1+n

The calcations gives us clear understanding that T(n) = O(n)

Static variables in recursion:
------------------------------

int fun( int n )
{
    if( n > 0 )
    {
        return fun( n-1 ) + n;
    }
    return 0;
}

void main()
{
    int a = 5;
    printf( "%d", fun(a) );
}

Tracing the function:
---------------------

                                    fun( 5 ) = 15
                                      / \
                                     /   \
                            fun( 4 ) +  _5_ = 15
                               /  \
                              /    \
                       fun( 3 ) +  _4_ = 10
                          /  \
                         /    \
                  fun( 2 ) +  _3_ = 6
                     /  \
                    /    \
              fun( 1 ) + _2_ = 3
                 /  \
                /    \
         fun( 0 ) +  _1_ = 1
               |
               |
               0

This was a simple tracing and there was nothing new so far from what we already knew.
Now let's introduce a static variable and see how can we trace the tree.

int fun( int n )
{
    static int x = 0;
    if( n > 0 )
    {
        x++;
        return fun( n-1 ) + x;
    }
    return 0;
}

void main()
{
    int a = 5;
    printf( "%d", fun(a) );
}

         Let's track static variable here     x=0                fun( 5 ) = 25
                                                                    / \
                                                                   /   \
                      x=1                                 fun( 4 ) +  _5_ = 25
                                                             /  \
                                                            /    \
                      x=2                            fun( 3 ) +  _5_ = 20
                                                        /  \
                                                       /    \
                      x=3                          fun( 2 ) +  _5_ = 15
                                                   /  \
                                                  /    \
                      x=4                   fun( 1 ) + _5_ = 10
                                               /  \
                                              /    \
                      x=5              fun( 0 ) +  _5_ = 5
                                             |
                                             |
                                             0