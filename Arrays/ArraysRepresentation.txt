Arrays:
-------
1. What is an Array?
2. Declaring and Initializing an Array
3. Accessing Array

1. What is an Array?
--------------------
Array is a collection of similar data elements.
Array is a contiguous memory block.
We can access the values stored in an array using indices.

e.g. int A[5];

     0   1   2    3   4
   +---+---+---+----+---+
A  |   |   |   | 67 |   |
   +---+---+---+----+---+

-  std::cout << A[3] << std::endl; // 67

2. Declaring and Initializing an Array
--------------------------------------
int A[5];

     0   1   2   3   4
   +---+---+---+---+---+
A  |   |   |   |   |   |
   +---+---+---+---+---+

The array A here holds garbage values as this is not initialized with any values.

initialize the values:
- int A[5] = {2,4,6,8,9};

     0   1   2   3   4
   +---+---+---+---+---+
   | 2 | 4 | 6 | 8 | 9 |
   +---+---+---+---+---+

- int A[5] = {2,4};
  When we initilize the array partially, the array will try to initialize all the value and the remaining values are initialized with 0.

     0   1   2   3   4
   +---+---+---+---+---+
   | 2 | 4 | 0 | 0 | 0 |
   +---+---+---+---+---+

- int A[5] = {0}

     0   1   2   3   4
   +---+---+---+---+---+
   | 0 | 0 | 0 | 0 | 0 |
   +---+---+---+---+---+
   
- int A[] = {1,2,3,4,5,6}
  Here in this case the number of variables using which the array is initilized those many array elements are created.

     0   1   2   3   4   5
   +---+---+---+---+---+---+
   | 1 | 2 | 3 | 4 | 5 | 6 |
   +---+---+---+---+---+---+
   
3. Accessing Array Elements
---------------------------
int A[5] = {2,5,4,9,8};

Using index:
------------
printf( "%d", A[0] );

Using for loop:
---------------
for( int i = 0; i < 5; ++i )
{
    printf( "%d", A[i] );
}

Using pointer arithmatic:
-------------------------
printf( "%d", A[2] );
printf( "%d", 2[A] );
printf( "%d", *(A+2) );

Static Vs Dynamic Arrays:
-------------------------
Static array:
-------------
When the size of an array is static and fixed, the array is known as static array.
The static arrays are created on stack, as a part of activation record.
The size of the array is decided at the compile-time, though the memory is allocated at the runtime.

Dynamic Array:
--------------
When the size of an array is dynamic or can be changed in runtime as per the requirement, the array is known as dynamic array.
Dynamic arrays are created on the head.
The size of the array is decided at the compile-time, though the memory is allocated at the runtime.
Dynamic Array is accessed using ppointer as the memory is allocated on head.
This is very important to release/delete the memory when not in used.

NOTE:
The size of the array in C must be a constant value and can not be initialized with a variable, and only be decided at compile time
In C++ we can create an array of any size at runtimee, and will be created in stack only.
VVIMP: The VLA may or may not work based on the compilers and C++ standrds being used. In MSVS VLA will produce an error.

How to manipulate/change the size of a static array:
----------------------------------------------------
int *p = new int[5];
int *q = new int [10];
for( int  i =0; i < 5; ++i )
{
    // We can also use memcopy to copy the elements instead of using for loop.
    q[i] = p[i];
}
delete []p;
p = q;
q = nullptr;

Q: Why can the size of an array can not be grown.
A: We have already learned that the array elements are stored in a contiguous memory, and if we increase the size, the contiguous
   memory location may or may not be free, and may be used by some other variables.
   This does not guarantee the contiguous memory location is free.

2-D Arrays:
-----------
In the discussion till now we have checked the 1-D array. The most commonly used array types are 1D, 2D and 3D arrays.
This does not mean we have a cap, we can have n-D arrays there is no limit for this.
This is mostly commonly used to implement matrices and tabular data.

There are 3 ways to declare the 2-D arrays:
-------------------------------------------
1. int a[3][4]

       0    1    2    3
     +----+----+----+----+
   0 |  1 |  2 |  3 |  4 |
     +----+----+----+----+
   1 |  5 |  6 |  7 |  8 |
     +----+----+----+----+
   2 |  9 | 10 | 11 | 12 |
     +----+----+----+----+
  As the arrays are contiguous memory locations, this matrix is infact a linear memory locations.
  
  In memory representation:
  +---+---+---+---+---+---+---+---+---+----+----+----+
  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
  +---+---+---+---+---+---+---+---+---+----+----+----+

2. int * a[3]
   a[0] = new int[4];
   a[1] = new int[4];
   a[2] = new int[4];
     
     +---+    +----+----+----+----+ 
   0 |   | -> |  1 |  2 |  3 |  4 |
     |   |    +----+----+----+----+
     +---+    +----+----+----+----+
   1 |   | -> |  5 |  6 |  7 |  8 |
     |   |    +----+----+----+----+
     +---+    +----+----+----+----+
   2 |   | -> |  9 | 10 | 11 | 12 |
     +---+    +----+----+----+----+

3. int **a;
   a = new int*[3];
   a[0] = new int[4];
   a[1] = new int[4];
   a[2] = new int[4];

     +---+
     |   |
     +---+
       |
     +---+    +----+----+----+----+ 
   0 |   | -> |  1 |  2 |  3 |  4 |
     |   |    +----+----+----+----+
     +---+    +----+----+----+----+
   1 |   | -> |  5 |  6 |  7 |  8 |
     |   |    +----+----+----+----+
     +---+    +----+----+----+----+
   2 |   | -> |  9 | 10 | 11 | 12 |
     +---+    +----+----+----+----+

Array representation in compilers:
----------------------------------
      0    1    2    3
    +----+----+----+----+
 A  |  9 | 10 | 11 | 12 |
    +----+----+----+----+
    L0

    This is a relative formula, for relative address based on base adrress of an array.
    -----------------------------------------------------------------------------------
e.g. A[3] = 12;
     address(A[3]) = L0+3*sizeof(int)
     address(A[3]) = L0 (Base Address) + index * sizeOfDataType;

    NOTE: L0 -> Address of base location is known at runtime and is updated at runtime, this is called as data binding.
          
2D array representation:
------------------------
How the 2D arrays are stored in contiguous 1 dimansional array how the mapping is done.
There are two ways to achieve this:
1. Row Major Mapping
2. Column Major Mapping

1. Row Major Mapping:
---------------------
    int a[3][4];

        0    1    2    3
     +----+----+----+----+
   0 |  1 |  2 |  3 |  4 |
     +----+----+----+----+
   1 |  5 |  6 |  7 |  8 |
     +----+----+----+----+
   2 |  9 | 10 | 11 | 12 |
     +----+----+----+----+

     +---+---+---+---+---+---+---+---+---+----+----+----+
     | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |
     +---+---+---+---+---+---+---+---+---+----+----+----+
     |      Row 0    |      Row 1    |       Row 2      |

     a[i][j];
     A[1][2] = 7;
     address(a[1][2]) = L0[Base Address] + (1 * 4 + 2) * sizeof(int);
     address(a[2][3]) = L0[Base Address] + (2 * 4 + 3) * sizeof(int);
     address(a[i][j]) = L0 + (i * n + j) * sizeOfDataType;
     NOTE: n is number of elements in row.

1. Column Major Mapping:
------------------------
    int a[3][4];

        0    1    2    3
     +----+----+----+----+
   0 |  1 |  2 |  3 |  4 |
     +----+----+----+----+
   1 |  5 |  6 |  7 |  8 |
     +----+----+----+----+
   2 |  9 | 10 | 11 | 12 |
     +----+----+----+----+

     +---+---+---+---+---+----+---+---+----+---+---+----+
     | 1 | 5 | 9 | 2 | 6 | 10 | 3 | 7 | 11 | 4 | 8 | 12 |
     +---+---+---+---+---+----+---+---+----+---+---+----+
     |   Col 0   |    Col 1   |    Col 2   |    Col 3   |

     a[i][j];
     a[1][2] = 7;
     address(a[1][2]) = L0[Base Address] + (2 * 3 + 1) * sizeof(int);
     address(a[2][3]) = L0[Base Address] + (3 * 3 + 2) * sizeof(int);
     address(a[i][j]) = L0 + (j * n + i) * sizeOfDataType;
     NOTE: n is number of elements in column.

Row Major: a[i][j] = L0 + (i * n + j) * sizeOfDataType;
Col Major: a[i][j] = L0 + (j * n + i) * sizeOfDataType;


Row Major and Column Major Formula for 4D array:
------------------------------------------------
Row Major Formula:
------------------
a[d1][d2][d3][d4]
address(a[i1][i2][i3][i4]) = L0 + (i1 * d2 * d3 * d4 + i2 * d3 * d4 + i3 * d4 + i4) * sizeOfDataType;

Col Major Formula:
------------------
a[d1][d2][d3][d4]
address(a[i1][i2][i3][i4]) = L0 + (i4 * d1 * d2 * d3 + i3 * d1 * d2 + i2 * d1 + i1) * sizeOfDataType;
